syntax = "proto2";
package improbable;
// A set of worker attributes. This represents a minimum set of requirements that a candidate worker
// must fulfill in order to be eligible for some constraint, and corresponds to the concrete set of
// capabilities defined in each worker's JSON configuration file.
message WorkerAttributeSet {
  // A particular capability is just an arbitrary string. A particular worker's attribute set must
  // contain _all_ of these attributes in order to satisfy this WorkerAttributeSet.
  repeated string  attribute = 1;
}

// A WorkerRequirementSet is a way to describe a set of workers. We can use a WorkerRequirementSet
// to, for example, describe the sorts of workers that are allowed to be authoritative on a
// particular component.
//
// For example, we might want an entity to be readable on any worker that can handle "visual" or
// "physical" things, and could describe that with a WorkerRequirementSet containing two
// WorkerAttributeSets:
//
//   {
//     { "visual" },
//     { "physical" }
//   }
message WorkerRequirementSet {
  // A worker satisfies this WorkerRequirementSet if it satisfies _any_ of these
  // WorkerAttributeSets (i.e. if any one of these WorkerAttributeSets is a subset of the worker's
  // attributes).
  repeated WorkerAttributeSet attribute_set = 1;
}

// The EntityAcl component defines what sorts of workers can read and write each entity in the
// simulation. This component is REQUIRED (every entity must be created with it).
message EntityAcl {
   optional uint32 msg_cid = 1[default = 50];
  // The read ACL defined the kinds of workers that may check out the entity. Note that a worker
  // is currently required to satisfy this constraint even if it is authoritative on some component
  // on this entity; i.e. an entity will _never_ be checked out on any worker that does not match
  // this WorkerRequirementSet.
  optional WorkerRequirementSet read_acl = 2;

  // This map defines the kinds of worker that are allowed to be authoritative on each component,
  // where components are keyed by their component ID (as defined in schema and generated code).
  // A component does not have to have an ACL, in which case it can't be authoritative on any
  // worker.
 
  map<uint32,WorkerRequirementSet> component_write_acl = 3;
}

// The Metadata component is used to hold debug and convenience information about
// the entity. This component is optional.
message Metadata {
 
  optional uint32 msg_cid = 1[default = 53];
  // The entity type is a string describing what kind of thing the entity represents
  // in the simulation. It is used by the Inspector to colour or filter entities
  // based on their entity type, for example "car" or "player".
  optional string entity_type = 2;
}

// A type representing a 3-dimensional position in space. This is primarily used as part of the
// standard Position component, below, but can also be reused for other purposes.
message Coordinates {
  optional double x = 1;
  optional double y = 2;
  optional double z = 3;
}

// A type representing the dimensions of a cuboid.
message EdgeLength {
  optional double x = 1;
  optional double y = 2;
  optional double z = 3;
}

// The Position component defines the canonical position of an entity inside a SpatialOS simulation.
// This is used by SpatialOS for load-balancing, authority delegation, and spatial queries. Note
// that although this component can be used to represent an entity's position on workers, it doesn't
// _have_ to be: it's completely reasonable for a simulation to define a custom or optimized notion
// of position, and simply update this component as necessary (perhaps less frequently) for
// authority delegation.
message Position {
 
  optional uint32 msg_cid = 1[default = 54];
  optional Coordinates coords = 2;
}

// The Peristence component is a marker component used to indicate that an entity should be
// persisted in simulation snapshots. Any entity without this component will be dropped when a
// snapshot is taken.
message Persistence {
 
   optional uint32 msg_cid = 1[default = 55];
}


message ComponentInterest {
  
  message SphereConstraint {
    optional Coordinates center = 1;
    optional double radius = 2;
  }

  message CylinderConstraint {
    optional Coordinates center = 1;
    optional double radius = 2;
  }

  message BoxConstraint {
    optional Coordinates center = 1;
    optional EdgeLength edge_length = 2;
  }

  message RelativeSphereConstraint {
    optional double radius = 1;
  }

  message RelativeCylinderConstraint {
    optional double radius = 1;
  }

  message RelativeBoxConstraint {
    optional EdgeLength edge_length = 1;
  }

  message SelfConstraint {
  
  }

  message QueryConstraint {
    // Only one constraint should be provided. Providing more than one is invalid.

    optional SphereConstraint sphere_constraint = 1;
    optional CylinderConstraint cylinder_constraint = 2;
    optional BoxConstraint box_constraint = 3;
    optional RelativeSphereConstraint relative_sphere_constraint = 4;
    optional RelativeCylinderConstraint relative_cylinder_constraint = 5;
    optional RelativeBoxConstraint relative_box_constraint = 6;
    optional int64 entity_id_constraint = 7;
    optional uint32 component_constraint = 8;
    repeated QueryConstraint and_constraint = 9;
    repeated QueryConstraint or_constraint = 10;
    optional SelfConstraint  self_constraint = 12;
  }
  message Query {
    optional QueryConstraint constraint = 1;

    // Either full_snapshot_result or a list of result_component_id should be provided. Providing both is invalid.
    optional bool full_snapshot_result = 2;
    repeated uint32 result_component_id = 3;
    // Used for frequency-based rate limiting. Represents the maximum frequency of updates for this
    // particular query. An empty option represents no rate-limiting (ie. updates are received
    // as soon as possible). Frequency is measured in Hz.
    //
    // If set, the time between consecutive updates will be at least 1/frequency. This is determined
    // at the time that updates are sent from the Runtime and may not necessarily correspond to the
    // time updates are received by the worker.
    //
    // If after an update has been sent, multiple updates are applied to a component, they will be
    // merged and sent as a single update after 1/frequency of the last sent update. When components
    // with events are merged, the resultant component will contain a concatenation of all the
    // events.
    //
    // If multiple queries match the same Entity-Component then the highest of all frequencies is
    // used.
    optional float frequency = 4;
    repeated uint32 result_compmentset_id = 5;
  }
 
  repeated Query queries = 1;
}


// An entity's interest is a map of Component IDs to a list of Entity queries, where the queries define other Entities
// needed to simulate the component.
//
// If a Worker is authoritative over a Component ID present in the map, it will be provided with updates for Entities
// which match the corresponding queries.
message Interest {
  optional uint32 msg_cid = 1[default = 58];
 
  map<uint32, ComponentInterest> component_interest = 2;
}

message ShardedMap {}

message AuthorityDelegation{
  optional uint32 msg_cid = 1[default = 65];
  map<uint32, uint64> delegations = 2;
}

message Partition{
  optional uint32 msg_cid = 1[default = 66];
  optional uint64 worker_connection_id = 2;
}